{"cells":[{"cell_type":"markdown","id":"7239b12b-c6c8-4da8-b2c5-abf220fbfaab","metadata":{"id":"7239b12b-c6c8-4da8-b2c5-abf220fbfaab"},"source":["# Importing necessary utilities"]},{"cell_type":"code","execution_count":14,"id":"76e464e5-0a8c-40f8-83d3-e93b1aee4cab","metadata":{"id":"76e464e5-0a8c-40f8-83d3-e93b1aee4cab","executionInfo":{"status":"ok","timestamp":1708504722603,"user_tz":-330,"elapsed":367,"user":{"displayName":"CH20B014 KURUVA.LIKITH KUMAR","userId":"05181084510598960803"}}},"outputs":[],"source":["import numpy as np\n","import pandas as pd\n","import seaborn as sns\n","from temp_setpoint import Tref, time_list, n_tf\n","from reactor_model import max_temp, min_temp, max_conc, min_conc, num_temp, num_conc, temp_list, conc_list, tj_list, state_index, new_state, T, Ca\n","import time\n","import tensorflow as tf"]},{"cell_type":"markdown","id":"64c64a00","metadata":{"id":"64c64a00"},"source":["# Replay memory class"]},{"cell_type":"code","execution_count":15,"id":"ac4ec360","metadata":{"id":"ac4ec360","executionInfo":{"status":"ok","timestamp":1708504723641,"user_tz":-330,"elapsed":8,"user":{"displayName":"CH20B014 KURUVA.LIKITH KUMAR","userId":"05181084510598960803"}}},"outputs":[],"source":["class ReplayMemory:\n","    def __init__(self, max_size, num_cols):\n","        self.memory = np.zeros((max_size, num_cols))\n","        self.size = 0\n","        self.set_size = max_size\n","        self.curr_index = 0\n","        self.is_full = False\n","    def push(self, item):\n","        if self.size >= self.set_size and self.is_full == False:\n","            self.is_full = True\n","            self.curr_index = 0\n","        elif self.curr_index >= self.set_size and self.is_full == True:\n","            self.curr_index = 0\n","        elif self.size < self.set_size:\n","            self.size += 1\n","        self.memory[self.curr_index] = item\n","        self.curr_index += 1\n","    def get(self, index=None):\n","        if index is None: return np.copy(self.memory[0: self.size])\n","        return np.copy(self.memory[index])\n","    def get_batch(self, size):\n","        end_index = self.set_size if self.is_full else self.curr_index\n","        indexes = np.random.choice(range(0, end_index), size=size, replace=False)\n","        return np.copy(self.memory[indexes])\n",""]},{"cell_type":"markdown","id":"5171c4c8-a8bb-4e9a-a9b0-3939850b596c","metadata":{"id":"5171c4c8-a8bb-4e9a-a9b0-3939850b596c"},"source":["# Defining hyperparameters"]},{"cell_type":"code","execution_count":16,"id":"7cbee35b-d55c-405c-a221-a9f78db72c76","metadata":{"id":"7cbee35b-d55c-405c-a221-a9f78db72c76","executionInfo":{"status":"ok","timestamp":1708504723642,"user_tz":-330,"elapsed":7,"user":{"displayName":"CH20B014 KURUVA.LIKITH KUMAR","userId":"05181084510598960803"}}},"outputs":[],"source":["# discount factor for q learning\n","gamma = 1\n","learning_rate = 1e-2\n","e = 0.05"]},{"cell_type":"markdown","id":"952862e3-c04d-42ed-885c-41b3429c55c3","metadata":{"id":"952862e3-c04d-42ed-885c-41b3429c55c3"},"source":["# Defining model function"]},{"cell_type":"code","execution_count":17,"id":"41848080-e99a-489d-bd55-6fc10d1ace46","metadata":{"id":"41848080-e99a-489d-bd55-6fc10d1ace46","executionInfo":{"status":"ok","timestamp":1708504723642,"user_tz":-330,"elapsed":7,"user":{"displayName":"CH20B014 KURUVA.LIKITH KUMAR","userId":"05181084510598960803"}}},"outputs":[],"source":["def make_model():\n","    \"\"\" Make model for continous state space and discrete action space using keras API\n","    \"\"\"\n","    Q_func_model = tf.keras.models.Sequential()\n","    Q_func_model.add(tf.keras.layers.Dense(70, input_shape=(3, ), activation=\"relu\"))\n","    Q_func_model.add(tf.keras.layers.Dense(70, activation=\"relu\"))\n","    Q_func_model.add(tf.keras.layers.Dense(70, activation=\"relu\"))\n","    Q_func_model.add(tf.keras.layers.Dense(70, activation=\"relu\"))\n","    Q_func_model.add(tf.keras.layers.Dense(70, activation=\"relu\"))\n","    Q_func_model.add(tf.keras.layers.Dense(70, activation=\"relu\"))\n","    Q_func_model.add(tf.keras.layers.Dense(num_temp, activation=\"linear\"))\n","    Q_func_model.compile(\n","        loss=\"mse\", optimizer=tf.keras.optimizers.Adam(learning_rate=learning_rate),\n","        metrics=[\"mse\"]\n","    )\n","    Q_func_model.build()\n","    return Q_func_model"]},{"cell_type":"markdown","id":"0865471e-dfee-43cb-98fd-708c6d3874a2","metadata":{"id":"0865471e-dfee-43cb-98fd-708c6d3874a2"},"source":["# Defining policy"]},{"cell_type":"code","execution_count":18,"id":"05ddf122-8809-468d-a5bd-74845bc6d97e","metadata":{"id":"05ddf122-8809-468d-a5bd-74845bc6d97e","executionInfo":{"status":"ok","timestamp":1708504723642,"user_tz":-330,"elapsed":6,"user":{"displayName":"CH20B014 KURUVA.LIKITH KUMAR","userId":"05181084510598960803"}}},"outputs":[],"source":["def greedy_policy(model, state, time_index):\n","    \"\"\" Calculates action based on Q matrix.\n","    Parameters:\n","        model: the neural network that takes state as input and gives Q values for different actions as outputs\n","        state: a 2 x 1 numpy array\n","        time_index: discrete time index in time_list\"\"\"\n","    q_action_array = model.predict(np.array([[time_index, state[T, 0], state[Ca, 0]]]), verbose=0)[0]\n","    tj_index = np.argmax(q_action_array)\n","    tj_indexes = np.where(q_action_array == q_action_array[tj_index])[0]\n","    tj_index = np.random.choice(tj_indexes)\n","    return tj_index\n","\n","def policy(model, state, time_index, e):\n","    \"\"\" Calculates action based on Q matrix.\n","    Parameters:\n","        state: a 2 x 1 numpy array\n","        time_index: discrete time index in time_list\n","        e: epsilon - probability of choosing a random action\"\"\"\n","    rand_number = np.random.uniform()\n","    if rand_number < e: return np.random.randint(num_temp)\n","    else: return greedy_policy(model, state, time_index)"]},{"cell_type":"markdown","id":"cce92d0a-b8d7-4799-ad53-dd2caad715be","metadata":{"id":"cce92d0a-b8d7-4799-ad53-dd2caad715be"},"source":["# Defining reward functions"]},{"cell_type":"code","execution_count":19,"id":"91a9d127-c0b7-4ee8-a8b9-17e5b85a811a","metadata":{"id":"91a9d127-c0b7-4ee8-a8b9-17e5b85a811a","executionInfo":{"status":"ok","timestamp":1708504723642,"user_tz":-330,"elapsed":5,"user":{"displayName":"CH20B014 KURUVA.LIKITH KUMAR","userId":"05181084510598960803"}}},"outputs":[],"source":["def calc_reward(state, action, prev_action, iter_num):\n","    \"\"\" Calculate reward of the action done on state for the current iteration\n","    Parameters:\n","        state: a 2 x 1 numpy array\n","        action: a scalar value\n","        prev_action: a scalar value\n","        iter_num: integer\"\"\"\n","    Q = np.array([[1, 0],[0, 1]])\n","    R = 0.1\n","    if state is None: return -1*np.inf\n","    elif not (min_conc <= float(state[Ca]) <= max_conc): return -1*np.inf\n","    d_action = action - prev_action\n","    x = state - np.array([Tref[iter_num], 0]).reshape(-1, 1)\n","    # cost_val = x.T @ (Q @ x)\n","    cost_val = x.T @ (Q @ x) + R * (d_action**2)\n","    return -1*np.float64(cost_val)"]},{"cell_type":"markdown","id":"55c9ab4e-d80f-4e55-9eda-dea46731b8e4","metadata":{"id":"55c9ab4e-d80f-4e55-9eda-dea46731b8e4"},"source":["# Optimum q value out of model for given state/states"]},{"cell_type":"code","execution_count":20,"id":"efc7bb02-e1e5-4fd3-bade-f5bd4686df17","metadata":{"id":"efc7bb02-e1e5-4fd3-bade-f5bd4686df17","executionInfo":{"status":"ok","timestamp":1708504723642,"user_tz":-330,"elapsed":4,"user":{"displayName":"CH20B014 KURUVA.LIKITH KUMAR","userId":"05181084510598960803"}}},"outputs":[],"source":["def opt_q_val(model, state):\n","    \"\"\" Calculates action based on Q matrix.\n","    Parameters:\n","        model: the neural network that takes state as input and gives Q values for different actions as outputs\n","        state: a 2 x 1 numpy array\n","        time_index: discrete time index in time_list\"\"\"\n","    q_action_array = model(state)[0]\n","    return np.max(q_action_array)\n","\n","def opt_q_val_many_states(model, states):\n","    \"\"\" Calculates action based on Q matrix.\n","    Parameters:\n","        model: the neural network that takes state as input and gives Q values for different actions as outputs\n","        states: a n x 3 numpy array\"\"\"\n","\n","    q_action_arrays = model(states)\n","    opt_q_values = np.max(q_action_arrays, axis=1)\n","    # some new line of code\n","    terminal_states_indexes = np.where(states[:, 0] == n_tf)[0]\n","    # print(f\"{states=}\")\n","    # print(f\"{terminal_states_indexes=}\")\n","    opt_q_values[terminal_states_indexes] = 0\n","    # print(f\"{opt_q_values=}\")\n","    # end\n","    return opt_q_values\n","\n","def argmax_q_val_many_states(model, states):\n","    \"\"\" Calculates action based on Q matrix.\n","    Parameters:\n","        model: the neural network that takes state as input and gives Q values for different actions as outputs\n","        states: a n x 3 numpy array\"\"\"\n","\n","    q_action_arrays = model(states)\n","    opt_q_values = np.argmax(q_action_arrays, axis=1)\n","    return opt_q_values"]},{"cell_type":"markdown","id":"d034c69f-fced-4bcc-ab4f-3a4eb98788b3","metadata":{"id":"d034c69f-fced-4bcc-ab4f-3a4eb98788b3"},"source":["# Training code"]},{"cell_type":"code","execution_count":21,"id":"6b9b5e49-def2-4234-ba57-de3f4a5fd344","metadata":{"id":"6b9b5e49-def2-4234-ba57-de3f4a5fd344","executionInfo":{"status":"ok","timestamp":1708504723642,"user_tz":-330,"elapsed":4,"user":{"displayName":"CH20B014 KURUVA.LIKITH KUMAR","userId":"05181084510598960803"}}},"outputs":[],"source":["def train_rl_model(num_episodes):\n","    time_, T_, C_, Tj, time_next, T_next, C_next, R = list(range(0, 8))\n","    set_steps = 5\n","    # initialize replay memory\n","    replay_memory = ReplayMemory(max_size = 600, num_cols = 8)\n","    # initialise action value function\n","    Q = make_model()\n","    # initialise target action value function to generate labels\n","    Q_t = make_model()\n","    Q_t.set_weights(Q.get_weights())\n","    optimizer = tf.keras.optimizers.Adam(learning_rate=learning_rate)\n","    loss_func = tf.keras.losses.mse\n","    batch_size = 300\n","    for episode_index in range(num_episodes):\n","        # initialize markov chain with initial state\n","        state = np.array(\n","            [np.random.uniform(min_temp, max_temp), np.random.uniform(min_conc, max_conc)],\n","        ).reshape(-1, 1)\n","        prev_action = None\n","        for t in range(0, n_tf):\n","            # epsilon greedy action selection\n","            action_index = policy(Q, state, t, e)\n","            action = tj_list[action_index]\n","            print(action_index)\n","            # executing action, observing reward and next state to store experience in tuple\n","            next_state = new_state(state, action)\n","            if t == 0: reward = calc_reward(state, action, action, t)\n","            else: reward = calc_reward(state, action, prev_action, t)\n","            prev_action = action\n","            # store experience in replay memory\n","            replay_memory.push(np.array([t, state[T,0], state[Ca,0], action_index, t+1, next_state[T,0], next_state[Ca,0], reward]))\n","            # get replay memory\n","            if replay_memory.size < batch_size:\n","                state = next_state\n","                continue\n","\n","            rand_batch = replay_memory.get_batch(size=batch_size)\n","            # get inputs and labels for neural network\n","            inputs = rand_batch[:, time_:C_+1]\n","            next_inputs = rand_batch[:, time_next:R]\n","            action_args  = rand_batch[:, Tj]\n","            labels = rand_batch[:, R] + gamma * opt_q_val_many_states(Q_t, next_inputs)\n","            # training model\n","            masks = tf.one_hot(np.rint(action_args).astype(int), num_temp)\n","            with tf.GradientTape() as tape:\n","                Q_values = Q(inputs)\n","                Q_action = tf.reduce_sum(tf.multiply(Q_values, masks), axis=1)\n","                loss = loss_func(labels, Q_action)\n","            gradients = tape.gradient(loss, Q.trainable_variables)\n","            optimizer.apply_gradients(zip(gradients, Q.trainable_variables))\n","            # update state\n","            state = next_state\n","        if episode_index % set_steps == 0:\n","            Q_t.set_weights(Q.get_weights())\n","    return Q"]},{"cell_type":"markdown","id":"bc0893ba-2618-470e-a04c-02056faa3271","metadata":{"id":"bc0893ba-2618-470e-a04c-02056faa3271"},"source":["# Running reactor to check performance"]},{"cell_type":"code","execution_count":22,"id":"783263fe-1201-45ec-b7be-40ea262dd9a4","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"783263fe-1201-45ec-b7be-40ea262dd9a4","executionInfo":{"status":"ok","timestamp":1708504811841,"user_tz":-330,"elapsed":88203,"user":{"displayName":"CH20B014 KURUVA.LIKITH KUMAR","userId":"05181084510598960803"}},"outputId":"9813323f-1118-4660-b7d8-b81ffbf1124b"},"outputs":[{"output_type":"stream","name":"stdout","text":["3\n","3\n"]},{"output_type":"stream","name":"stderr","text":["<ipython-input-19-418919fd4b4b>:11: DeprecationWarning: Conversion of an array with ndim > 0 to a scalar is deprecated, and will error in future. Ensure you extract a single element from your array before performing this operation. (Deprecated NumPy 1.25.)\n","  elif not (min_conc <= float(state[Ca]) <= max_conc): return -1*np.inf\n","<ipython-input-19-418919fd4b4b>:16: DeprecationWarning: Conversion of an array with ndim > 0 to a scalar is deprecated, and will error in future. Ensure you extract a single element from your array before performing this operation. (Deprecated NumPy 1.25.)\n","  return -1*np.float64(cost_val)\n"]},{"output_type":"stream","name":"stdout","text":["3\n","3\n","3\n","3\n","3\n","3\n","3\n","3\n","7\n","3\n","8\n","3\n","3\n","3\n","3\n","3\n","9\n","4\n","9\n","9\n","9\n","9\n","9\n","3\n","3\n","3\n","3\n","3\n","3\n","3\n","3\n","3\n","2\n","3\n","3\n","3\n","3\n","3\n","3\n","3\n","3\n","2\n","1\n","9\n","9\n","9\n","9\n","9\n","3\n","3\n","3\n","3\n","5\n","3\n","3\n","3\n","3\n","3\n","3\n","3\n","3\n","3\n","3\n","3\n","3\n","3\n","9\n","9\n","9\n","9\n","9\n","9\n","9\n","3\n","3\n","3\n","3\n","3\n","3\n","3\n","3\n","3\n","3\n","3\n","3\n","3\n","3\n","3\n","3\n","3\n","0\n","9\n","9\n","9\n","9\n","9\n","9\n","9\n","3\n","3\n","3\n","3\n","3\n","3\n","3\n","3\n","3\n","3\n","3\n","3\n","3\n","3\n","3\n","3\n","3\n","3\n","9\n","9\n","9\n","9\n","9\n","9\n","9\n","3\n","3\n","3\n","3\n","3\n","3\n","3\n","3\n","3\n","3\n","3\n","3\n","3\n","3\n","3\n","3\n","7\n","3\n","9\n","9\n","9\n","9\n","9\n","3\n","9\n","3\n","3\n","3\n","3\n","3\n","3\n","3\n","3\n","3\n","3\n","3\n","0\n","3\n","3\n","3\n","3\n","3\n","3\n","9\n","9\n","9\n","9\n","9\n","9\n","9\n","9\n","3\n","3\n","0\n","3\n","3\n","3\n","3\n","3\n","8\n","3\n","3\n","3\n","3\n","3\n","3\n","3\n","3\n","9\n","9\n","8\n","9\n","9\n","9\n","9\n","3\n","3\n","3\n","3\n","3\n","3\n","3\n","3\n","3\n","3\n","3\n","3\n","3\n","3\n","3\n","3\n","3\n","3\n","9\n","9\n","9\n","9\n","9\n","9\n","9\n","3\n","3\n","5\n","3\n","3\n","3\n","5\n","3\n","3\n","3\n","3\n","3\n","3\n","3\n","3\n","3\n","3\n","3\n","9\n","9\n","9\n","9\n","9\n","9\n","8\n","3\n","3\n","3\n","3\n","3\n","3\n","3\n","3\n","3\n","3\n","3\n","3\n","3\n","3\n","3\n","3\n","3\n","3\n","9\n","9\n","9\n","9\n","9\n","9\n","9\n","3\n","3\n","3\n","3\n","3\n","3\n","3\n","3\n","3\n","3\n","3\n","7\n","3\n","3\n","3\n","3\n","3\n","3\n","9\n","9\n","9\n","6\n","9\n","8\n","9\n","0\n","0\n","0\n","0\n","0\n","0\n","0\n","0\n","0\n","6\n","6\n","6\n","6\n","6\n","6\n","6\n","5\n","5\n","5\n","5\n","5\n","5\n","5\n","5\n","5\n","5\n","5\n","5\n","5\n","5\n","5\n","9\n","5\n","5\n","5\n","5\n","5\n","5\n","5\n","5\n","5\n","5\n","5\n","5\n","5\n","5\n","5\n","5\n","5\n","5\n","5\n","5\n","5\n","5\n","5\n","5\n","5\n","5\n","5\n","5\n","5\n","5\n","5\n","5\n","4\n","5\n","5\n","5\n","5\n","5\n","5\n","5\n","5\n","5\n","5\n","5\n","5\n","5\n","5\n","5\n","5\n","5\n","5\n","5\n","5\n","5\n","5\n","5\n","5\n","2\n","5\n","5\n","5\n","5\n","5\n","5\n","5\n","5\n","5\n","5\n","4\n","4\n","4\n","4\n","1\n","5\n","5\n","5\n","5\n","5\n","7\n","5\n","5\n","5\n","5\n","5\n","5\n","5\n","5\n","5\n","5\n","5\n","5\n","5\n","5\n","9\n","5\n","5\n","4\n","4\n","5\n","5\n","5\n","5\n","4\n","4\n","5\n","5\n","5\n","5\n","5\n","5\n","5\n","5\n","5\n","5\n","5\n","5\n","5\n","5\n","9\n","4\n","5\n","5\n","5\n","5\n","4\n","4\n","4\n","4\n","3\n","4\n","5\n","6\n","5\n","5\n","6\n","6\n","6\n","6\n","6\n","6\n","5\n","8\n","5\n","9\n","9\n","9\n","9\n","4\n","4\n","4\n","5\n","5\n","5\n","5\n","5\n","5\n","6\n","8\n","8\n","8\n","6\n","5\n","5\n","5\n","6\n","6\n","6\n","6\n","7\n","7\n","4\n","9\n","9\n","9\n","5\n","5\n","5\n","5\n","5\n","5\n","5\n","5\n","5\n","5\n","5\n","6\n","6\n","6\n","6\n","6\n","6\n","6\n","6\n","8\n","8\n","5\n","9\n","9\n","9\n","1\n","5\n","5\n","4\n","4\n","4\n","4\n","6\n","5\n","5\n","5\n","5\n","5\n","8\n","6\n","6\n","6\n","6\n","6\n","9\n","9\n","4\n","9\n","9\n","5\n","4\n","4\n","4\n","4\n","5\n","5\n","5\n","5\n","8\n","6\n","6\n","6\n","6\n","6\n","5\n","5\n","5\n","6\n","5\n","8\n","8\n","5\n","5\n","5\n","5\n","4\n","4\n","4\n","4\n","5\n","5\n","5\n","5\n","6\n","6\n","6\n","6\n","6\n","6\n","6\n","6\n","4\n","6\n","5\n","8\n","2\n","5\n","5\n","5\n","4\n","4\n","6\n","5\n","5\n","5\n","5\n","4\n","4\n","4\n","4\n","6\n","6\n","6\n","6\n","6\n","5\n","5\n","5\n","5\n","8\n","8\n","8\n","8\n","9\n","9\n","4\n","5\n","5\n","5\n","5\n","5\n","5\n","5\n","4\n","8\n","0\n","8\n","4\n","6\n","6\n","6\n","6\n","6\n","1\n","9\n","9\n","9\n","9\n","9\n","9\n","4\n","4\n","4\n","4\n","4\n","4\n","5\n","5\n","5\n","6\n","6\n","6\n","6\n","6\n","5\n","5\n","5\n","5\n","5\n","6\n","6\n","5\n","5\n","5\n","3\n","4\n","4\n","4\n","4\n","5\n","2\n","2\n","2\n","6\n","6\n","6\n","6\n","6\n","6\n","5\n","5\n","5\n","5\n","6\n","6\n","6\n","6\n","5\n","5\n","5\n","5\n","4\n","4\n","4\n","5\n","5\n","5\n","5\n","5\n","5\n","6\n","6\n","6\n","6\n","5\n","6\n","6\n","6\n","6\n","6\n","6\n","5\n","7\n","5\n","5\n","5\n","5\n","5\n","5\n","5\n","5\n","5\n","5\n","4\n","4\n","5\n","6\n","6\n","6\n","6\n","5\n","5\n","1\n","1\n"]},{"output_type":"stream","name":"stderr","text":["<ipython-input-22-14fe21c1c55d>:10: DeprecationWarning: Conversion of an array with ndim > 0 to a scalar is deprecated, and will error in future. Ensure you extract a single element from your array before performing this operation. (Deprecated NumPy 1.25.)\n","  state_arr[i] = float(curr_state[T])\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["if __name__ == \"__main__\":\n","    start_time = time.perf_counter()\n","    model = train_rl_model(30)\n","    cpu_time = time.perf_counter() - start_time\n","    curr_state = np.array([298, 0.6]).reshape(-1, 1)\n","    state_arr = np.zeros_like(time_list)\n","    action_arr = np.zeros_like(time_list)\n","    reward_arr = np.zeros_like(time_list)\n","    for i in range(n_tf):\n","        state_arr[i] = float(curr_state[T])\n","        tj_index = greedy_policy(model, curr_state, i)\n","        action_arr[i] = tj_list[tj_index]\n","        #reward_computation\n","        if i == 0: j = i\n","        else: j = i - 1\n","        reward_arr[i] = calc_reward(curr_state, action_arr[i], action_arr[j], i)\n","        # reward_computation end\n","        curr_state = new_state(curr_state, tj_list[tj_index])\n","    df = pd.DataFrame({\"Temperature\": state_arr, \"Time\": time_list, \"Reference\": Tref, \"Jacket Temperature\": action_arr, \"Reward\": reward_arr})\n","    sns.set_theme()\n","    sns.lineplot(\n","        data=df,\n","        x=\"Time\",\n","        y=\"Temperature\",\n","        label=\"Reactor Temperature\",\n","    )\n","    sns.lineplot(\n","        data=df,\n","        x=\"Time\",\n","        y=\"Reference\",\n","        legend=\"full\",\n","        label=\"Reference Temperature\",\n","    )\n","    # sns.lineplot(x=time_list, y=action_arr, drawstyle='steps-pre', label=\"Jacket Temperature\")\n","\n","    MAE = np.sum(np.abs(state_arr-Tref))/len(state_arr)\n","    RMSE = (np.sum((state_arr-Tref)**2)/len(state_arr))**0.5"]},{"cell_type":"code","execution_count":23,"id":"5199a214-0246-47b6-ae1b-5a56b514995c","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"5199a214-0246-47b6-ae1b-5a56b514995c","executionInfo":{"status":"ok","timestamp":1708504811841,"user_tz":-330,"elapsed":18,"user":{"displayName":"CH20B014 KURUVA.LIKITH KUMAR","userId":"05181084510598960803"}},"outputId":"a4b1f841-e004-4c85-a563-63db2cf1c961"},"outputs":[{"output_type":"stream","name":"stdout","text":["days = 0\n","hrs = 0\n","mins = 1\n","seconds = 25\n"]}],"source":["days = int(cpu_time // 86400)\n","hrs = int((cpu_time -  86400 * days)// 3600)\n","mins = int((cpu_time - 3600 * hrs - 86400 * days) // 60)\n","seconds = int((cpu_time - 60 * mins - 3600 * hrs - 86400 * days) // 1)\n","print(f\"{days = }\\n{hrs = }\\n{mins = }\\n{seconds = }\")"]},{"cell_type":"code","execution_count":24,"id":"3ac24943","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"3ac24943","executionInfo":{"status":"ok","timestamp":1708504811841,"user_tz":-330,"elapsed":14,"user":{"displayName":"CH20B014 KURUVA.LIKITH KUMAR","userId":"05181084510598960803"}},"outputId":"f63ae416-8714-408b-f604-bcfd133369e6"},"outputs":[{"output_type":"stream","name":"stdout","text":["1/1 [==============================] - 0s 38ms/step\n"]},{"output_type":"execute_result","data":{"text/plain":["array([[-350.1435  , -147.60277 , -254.29308 , -134.47818 , -140.97423 ,\n","        -113.82275 ,  -97.38422 , -152.00844 , -132.44872 , -113.641815]],\n","      dtype=float32)"]},"metadata":{},"execution_count":24}],"source":["model.predict([[1, 298, 0.6]])"]},{"cell_type":"code","execution_count":25,"id":"ad78099f","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ad78099f","executionInfo":{"status":"ok","timestamp":1708504811841,"user_tz":-330,"elapsed":13,"user":{"displayName":"CH20B014 KURUVA.LIKITH KUMAR","userId":"05181084510598960803"}},"outputId":"34998cfc-5703-4216-b67f-8e5ffe59667b"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["(7.6219874848026965, 8.716996292897072)"]},"metadata":{},"execution_count":25}],"source":["(MAE, RMSE)"]},{"cell_type":"code","execution_count":26,"id":"8529c092","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"8529c092","executionInfo":{"status":"ok","timestamp":1708504812521,"user_tz":-330,"elapsed":691,"user":{"displayName":"CH20B014 KURUVA.LIKITH KUMAR","userId":"05181084510598960803"}},"outputId":"46fbf01a-d61c-43c6-ea08-3a4c9169775d"},"outputs":[{"output_type":"stream","name":"stdout","text":["1/1 [==============================] - 0s 50ms/step\n"]},{"output_type":"execute_result","data":{"text/plain":["array([[-1016.5838  ,  -409.7664  ,  -387.10693 ,  -283.3099  ,\n","         -121.555756,  -131.44969 ,  -489.37503 ,  -134.99515 ,\n","         -354.3809  ,  -205.87692 ]], dtype=float32)"]},"metadata":{},"execution_count":26}],"source":["model.predict([[9, 298, 0.6]])"]},{"cell_type":"code","execution_count":26,"id":"9da794ff","metadata":{"id":"9da794ff","executionInfo":{"status":"ok","timestamp":1708504812522,"user_tz":-330,"elapsed":6,"user":{"displayName":"CH20B014 KURUVA.LIKITH KUMAR","userId":"05181084510598960803"}}},"outputs":[],"source":[]}],"metadata":{"kernelspec":{"display_name":"Python 3 (ipykernel)","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.10.9"},"colab":{"provenance":[]}},"nbformat":4,"nbformat_minor":5}